if (UserInputEnemy == "1")
                    {
                        Console.Clear();
                        Console.WriteLine("Enemy Scout Selected");
                        EnemyHP = 125;
                        EnemyClass = Scout.ScoutName();
                        EnemyMaxHP = Scout.ScoutMaxHP();
                        EnemyPrimaryDamage = Scout.ScoutPrimaryDamage();
                        EnemySecondaryDamage = Scout.ScoutSecondaryDamage();
                        EnemyMeleeDamage = Scout.ScoutMeleeDamage();
                        EnemySpecial = Scout.ScoutPrimaryDamage();
                        EnemyPrimaryName = Scout.ScoutPrimaryName();
                        EnemySecondaryName = Scout.ScoutSecondaryName();
                        EnemyMeleeName = Scout.ScoutMeleeName();
                        EnemySpecialName = "No Special - Replaced By Primary";
                        Thread.Sleep(1000);
                        Console.WriteLine("...Scout Settings Applied");
                        Console.WriteLine("=====Debug=====");
                        Console.WriteLine($"Attack - Primary: {EnemyPrimaryDamage}");
                        Console.WriteLine($"Attack - Secondary: {EnemySecondaryDamage}");
                        Console.WriteLine($"Attack - Melee: {EnemyMeleeDamage}");
                        Console.WriteLine($"Special Roll - {EnemySpecial}");
                        Console.WriteLine($"Primary Weapon Name: {EnemyPrimaryName}");
                        Console.WriteLine($"Secondary Weapon Name: {EnemySecondaryName}");
                        Console.WriteLine($"Melee Weapon Name: {EnemyMeleeName}");
                        Console.WriteLine($"Special Move Name: {EnemySpecialName}");
                        Console.WriteLine(".....");
                        Thread.Sleep(2000);
                        EnemySetClass = true;
                    }
                    else if (UserInputEnemy == "2")
                    {
                        Console.Clear();
                        Console.WriteLine("Enemy Soldier Selected");
                        EnemyHP = 200;
                        EnemyClass = Soldier.SoldierName();
                        EnemyMaxHP = Soldier.SoldierMaxHP();
                        EnemyPrimaryDamage = Soldier.SoldierPrimaryDamage();
                        EnemySecondaryDamage = Soldier.SoldierSecondaryDamage();
                        EnemyMeleeDamage = Soldier.SoldierMeleeDamage();
                        EnemySpecial = Soldier.SoldierSpecial();
                        EnemyPrimaryName = Soldier.SoldierPrimaryName();
                        EnemySecondaryName = Soldier.SoldierSecondaryName();
                        EnemyMeleeName = Soldier.SoldierMeleeName();
                        EnemySpecialName = Soldier.SoldierSpecialName();
                        Thread.Sleep(1000);
                        Console.WriteLine("...Soldier Settings Applied");
                        Console.WriteLine("=====Debug=====");
                        Console.WriteLine($"Attack - Primary: {EnemyPrimaryDamage}");
                        Console.WriteLine($"Attack - Secondary: {EnemySecondaryDamage}");
                        Console.WriteLine($"Attack - Melee: {EnemyMeleeDamage}");
                        Console.WriteLine($"Special Roll - {EnemySpecial}");
                        Console.WriteLine($"Primary Weapon Name: {EnemyPrimaryName}");
                        Console.WriteLine($"Secondary Weapon Name: {EnemySecondaryName}");
                        Console.WriteLine($"Melee Weapon Name: {EnemyMeleeName}");
                        Console.WriteLine($"Special Move Name: {EnemySpecialName}");
                        Console.WriteLine(".....");
                        Thread.Sleep(2000);
                        EnemySetClass = true;
                    }
                    else if (UserInputEnemy == "3")
                    {
                        Console.Clear();
                        Console.WriteLine("Enemy Pyro Selected");
                        EnemyHP = 175;
                        EnemyClass = Pyro.PyroName();
                        EnemyMaxHP = Pyro.PyroMaxHP();
                        EnemyPrimaryDamage = Pyro.PyroPrimaryDamage();
                        EnemySecondaryDamage = Pyro.PyroSecondaryDamage();
                        EnemyMeleeDamage = Pyro.PyroMeleeDamage();
                        EnemySpecial = Pyro.PyroPrimaryDamage();
                        EnemyPrimaryName = Pyro.PyroPrimaryName();
                        EnemySecondaryName = Pyro.PyroSecondaryName();
                        EnemyMeleeName = Pyro.PyroMeleeName();
                        EnemySpecialName = "No Special - Replaced By Primary";
                        Thread.Sleep(1000);
                        Console.WriteLine("...Pyro Settings Applied");
                        Console.WriteLine("=====Debug=====");
                        Console.WriteLine($"Attack - Primary: {EnemyPrimaryDamage}");
                        Console.WriteLine($"Attack - Secondary: {EnemySecondaryDamage}");
                        Console.WriteLine($"Attack - Melee: {EnemyMeleeDamage}");
                        Console.WriteLine($"Special Roll - {EnemySpecial}");
                        Console.WriteLine($"Primary Weapon Name: {EnemyPrimaryName}");
                        Console.WriteLine($"Secondary Weapon Name: {EnemySecondaryName}");
                        Console.WriteLine($"Melee Weapon Name: {EnemyMeleeName}");
                        Console.WriteLine($"Special Move Name: {EnemySpecialName}");
                        Console.WriteLine(".....");
                        Thread.Sleep(2000);
                        EnemySetClass = true;
                    }
                    else if (UserInputEnemy == "4")
                    {
                        Console.Clear();
                        Console.WriteLine("Enemy Demoman Selected");
                        EnemyHP = 175;
                        EnemyClass = Demoman.DemomanName();
                        EnemyMaxHP = Demoman.DemomanMaxHP();
                        EnemyPrimaryDamage = Demoman.DemomanPrimaryDamage();
                        EnemySecondaryDamage = Demoman.DemomanSecondaryDamage(EnemyWeaponFeature++); //EnemyWeaponFeature is reserved for Sticky Placement for this class. [++ = +1 Sticky Placed [Damage Multiplier]
                        EnemyWeaponFeature--;
                        EnemyMeleeDamage = Demoman.DemomanMeleeDamage();
                        EnemySpecial = Demoman.DemomanSpecial(EnemyWeaponFeature); //Detonate Stickies. Uses EnemyWeaponFeature as a Damage Multiplier.
                        EnemyPrimaryName = Demoman.DemomanPrimaryName();
                        EnemySecondaryName = Demoman.DemomanSecondaryName();
                        EnemyMeleeName = Demoman.DemomanMeleeName();
                        EnemySpecialName = Demoman.DemomanSpecialName();
                        Thread.Sleep(1000);
                        Console.WriteLine("=====Debug=====");
                        Console.WriteLine($"Attack - Primary: {EnemyPrimaryDamage}");
                        Console.WriteLine($"Stickies Placed - Secondary: {EnemyWeaponFeature}");
                        Console.WriteLine($"Sticky Detonate Damage - {EnemySpecial}");
                        Console.WriteLine($"Attack - Melee: {EnemyMeleeDamage}");
                        Console.WriteLine($"Primary Weapon Name: {EnemyPrimaryName}");
                        Console.WriteLine($"Secondary Weapon Name: {EnemySecondaryName}");
                        Console.WriteLine($"Secondary Weapon Move Name: {EnemySpecialName}");
                        Console.WriteLine($"Melee Weapon Name: {EnemyMeleeName}");
                        Console.WriteLine($"Special Move Name: {EnemySpecialName}");
                        Console.WriteLine(".....");
                        Thread.Sleep(2000);
                        EnemySetClass = true;
                    }
                    else if (UserInputEnemy == "5")
                    {
                        Console.Clear();
                        Console.WriteLine("Enemy Heavy Selected");
                        EnemyHP = 300;
                        EnemyClass = Heavy.HeavyName();
                        EnemyMaxHP = Heavy.HeavyMaxHP();
                        EnemyPrimaryDamage = Heavy.HeavyPrimaryDamage();
                        EnemySecondaryDamage = Heavy.HeavySecondaryDamage();
                        EnemyMeleeDamage = Heavy.HeavyMeleeDamage();
                        EnemySpecial = Heavy.HeavyPrimaryDamage();
                        EnemyPrimaryName = Heavy.HeavyPrimaryName();
                        EnemySecondaryName = Heavy.HeavySecondaryName();
                        EnemyMeleeName = Heavy.HeavyMeleeName();
                        EnemySpecialName = "No Special - Replaced By Primary";
                        Thread.Sleep(1000);
                        Console.WriteLine("=====Debug=====");
                        Console.WriteLine($"Attack - Primary: {EnemyPrimaryDamage}");
                        Console.WriteLine($"Attack - Secondary: {EnemySecondaryDamage}");
                        Console.WriteLine($"Attack - Melee: {EnemyMeleeDamage}");
                        Console.WriteLine($"Special Roll - {EnemySpecial}");
                        Console.WriteLine($"Primary Weapon Name: {EnemyPrimaryName}");
                        Console.WriteLine($"Secondary Weapon Name: {EnemySecondaryName}");
                        Console.WriteLine($"Melee Weapon Name: {EnemyMeleeName}");
                        Console.WriteLine($"Special Move Name: {EnemySpecialName}");
                        Console.WriteLine(".....");
                        Thread.Sleep(2000);
                        EnemySetClass = true;
                    }
                    else if (UserInputEnemy == "6")
                    {
                        Console.Clear();
                        Console.WriteLine("Enemy Engineer Selected");
                        EnemyHP = 125;
                        EnemyClass = Engineer.EngineerName();
                        EnemyMaxHP = Engineer.EngineerMaxHP();
                        EnemyPrimaryDamage = Engineer.EngineerPrimaryDamage();
                        EnemySecondaryDamage = Engineer.EngineerSecondaryDamage();
                        EnemyMeleeDamage = Engineer.EngineerMeleeDamage();
                        EnemySpecial = Engineer.EngineerPrimaryDamage();
                        EnemyPrimaryName = Engineer.EngineerPrimaryName();
                        EnemySecondaryName = Engineer.EngineerSecondaryName();
                        EnemyMeleeName = Engineer.EngineerMeleeName();
                        EnemySpecialName = "No Special - Replaced By Primary";
                        Thread.Sleep(1000);
                        Console.WriteLine("...Engineer Settings Applied");
                        Console.WriteLine("=====Debug=====");
                        Console.WriteLine($"Attack - Primary: {EnemyPrimaryDamage}");
                        Console.WriteLine($"Attack - Secondary: {EnemySecondaryDamage}");
                        Console.WriteLine($"Attack - Melee: {EnemyMeleeDamage}");
                        Console.WriteLine($"Special Roll - {EnemySpecial}");
                        Console.WriteLine($"Primary Weapon Name: {EnemyPrimaryName}");
                        Console.WriteLine($"Secondary Weapon Name: {EnemySecondaryName}");
                        Console.WriteLine($"Melee Weapon Name: {EnemyMeleeName}");
                        Console.WriteLine($"Special Move Name: {EnemySpecialName}");
                        Console.WriteLine(".....");
                        Thread.Sleep(2000);
                        EnemySetClass = true;
                    }
                    else if (UserInputEnemy == "7")
                    {
                        Console.Clear();
                        Console.WriteLine("Enemy Medic Selected");
                        EnemyHP = 150;
                        EnemyClass = Medic.MedicName();
                        EnemyMaxHP = Medic.MedicMaxHP();
                        EnemyPrimaryDamage = Medic.MedicPrimaryDamage(EnemyCooldown);
                        EnemySecondaryDamage = Medic.MedicSecondaryDamage(EnemyCooldown);
                        EnemyMeleeDamage = Medic.MedicMeleeDamage(EnemyCooldown);
                        EnemySpecial = Medic.MedicPrimaryDamage(EnemyCooldown);
                        EnemyPrimaryName = Medic.MedicPrimaryName();
                        EnemySecondaryName = Medic.MedicSecondaryName();
                        EnemyMeleeName = Medic.MedicMeleeName();
                        EnemySpecialName = "No Special - Replaced By Primary";
                        Thread.Sleep(1000);
                        Console.WriteLine("...Medic Settings Applied");
                        Console.WriteLine("=====Debug=====");
                        Console.WriteLine($"Attack - Primary: {EnemyPrimaryDamage}");
                        Console.WriteLine($"Heal - Secondary: {EnemyHP + EnemySecondaryDamage}");
                        Console.WriteLine($"Attack - Melee: {EnemyMeleeDamage}");
                        Console.WriteLine($"Special Roll - {EnemySpecial}");
                        Console.WriteLine($"Primary Weapon Name: {EnemyPrimaryName}");
                        Console.WriteLine($"Secondary Weapon Name: {EnemySecondaryName}");
                        Console.WriteLine($"Melee Weapon Name: {EnemyMeleeName}");
                        Console.WriteLine($"Special Move Name: {EnemySpecialName}");
                        Console.WriteLine(".....");
                        Thread.Sleep(2000);
                        EnemySetClass = true;
                    }
                    else if (UserInputEnemy == "8")
                    {
                        Console.Clear();
                        Console.WriteLine("Enemy Sniper Selected");
                        EnemyHP = 125;
                        EnemyClass = Sniper.SniperName();
                        EnemyMaxHP = Sniper.SniperMaxHP();
                        EnemyPrimaryDamage = Sniper.SniperPrimaryDamage(EnemyWeaponFeature++); //EnemyWeaponFeature is reserved for Weapon Charge for this class. [++ = +1 Charge Level [Damage Multiplier]
                        EnemySecondaryDamage = Sniper.SniperSecondaryDamage();
                        EnemyMeleeDamage = Sniper.SniperMeleeDamage();
                        EnemySpecial = Sniper.SniperSecondaryDamage(); //Detonate Stickies. Uses EnemyWeaponFeature as a Damage Multiplier.
                        EnemyPrimaryName = Sniper.SniperPrimaryName();
                        EnemySecondaryName = Sniper.SniperSecondaryName();
                        EnemyMeleeName = Sniper.SniperMeleeName();
                        EnemySpecialName = Sniper.SniperSpecialName();
                        Thread.Sleep(1000);
                        Console.WriteLine("=====Debug=====");
                        Console.WriteLine($"Attack - Primary: {EnemySpecial}");
                        Console.WriteLine($"Charge - Primary: {EnemyWeaponFeature}");
                        Console.WriteLine($"Attack - Secondary: {EnemySecondaryDamage}");
                        Console.WriteLine($"Attack - Melee: {EnemyMeleeDamage}");
                        Console.WriteLine($"Primary Weapon Name: {EnemyPrimaryName}");
                        Console.WriteLine($"Primary Weapon Move Name: {EnemySpecialName}");
                        Console.WriteLine($"Secondary Weapon Name: {EnemySecondaryName}");
                        Console.WriteLine($"Melee Weapon Name: {EnemyMeleeName}");
                        Console.WriteLine(".....");
                        Thread.Sleep(2000);
                        EnemySetClass = true;
                    }
                    else if (UserInputEnemy == "9")
                    {
                        Console.Clear();
                        Console.WriteLine("Enemy Spy Selected");
                        EnemyHP = 125;
                        EnemyClass = Spy.SpyName();
                        EnemyMaxHP = Spy.SpyMaxHP();
                        EnemyPrimaryDamage = Spy.SpySecondaryDamage();
                        EnemySecondaryDamage = Spy.SpySecondaryDamage();
                        EnemyMeleeDamage = Spy.SpyMeleeDamage();
                        EnemySpecial = Spy.SpySecondaryDamage();
                        EnemyPrimaryName = "No Primary - Replaced by Secondary";
                        EnemySecondaryName = Spy.SpySecondaryName();
                        EnemyMeleeName = Spy.SpyMeleeName();
                        EnemySpecialName = "No Special - Replaced By Secondary";
                        Thread.Sleep(1000);
                        Console.WriteLine("...Spy Settings Applied");
                        Console.WriteLine("=====Debug=====");
                        Console.WriteLine($"Attack - Primary [Secondary]: {EnemyPrimaryDamage}");
                        Console.WriteLine($"Attack - Secondary: {EnemySecondaryDamage}");
                        Console.WriteLine($"Attack - Melee: {EnemyMeleeDamage}");
                        Console.WriteLine($"Special Roll [Secondary] - {EnemySpecial}");
                        Console.WriteLine($"Primary Weapon Name: {EnemyPrimaryName}");
                        Console.WriteLine($"Secondary Weapon Name: {EnemySecondaryName}");
                        Console.WriteLine($"Melee Weapon Name: {EnemyMeleeName}");
                        Console.WriteLine($"Special Move Name: {EnemySpecialName}");
                        Console.WriteLine(".....");
                        Thread.Sleep(2000);
                        EnemySetClass = true;
                    }